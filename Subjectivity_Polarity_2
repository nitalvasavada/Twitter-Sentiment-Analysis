import pip
pip.main(["install","twitter"])
pip.main(["install","textblob"])
from textblob import TextBlob
import nltk
import numpy as np
import pandas as pd
import json
import twitter
from twitter import Twitter 
from twitter import OAuth 
from twitter import TwitterHTTPError 
from twitter import TwitterStream
from pandas.io.json import json_normalize
from collections import Counter

ACCESS_TOKEN = '90406237-Dn7dKgarr3obHA4pyogWEOd6sR6TFnfZPEFU1xXYh'
ACCESS_SECRET = 'ToIyX2mqjZxh6tCYBeRHWBDHLSvRp7YKBArSDsVIGUlYO'
consumer_key = 'uGGHbbZ7VRJ8C4wlRxUrqzln4'
consumer_secret = 'rLLYDjBSGMoSuY79KAUC0fZzpQtFIiya1gcyXmvOXUlqYjfGPa'
oauth = OAuth(ACCESS_TOKEN, ACCESS_SECRET, consumer_key, consumer_secret)
twitter = Twitter(auth=oauth)

search_results = twitter.search.tweets(q = '#YHOO', count = 100)
statuses = search_results['statuses']
df = json_normalize(search_results, 'statuses')
status_texts = df["text"]
status_texts

polarity = []
for x in status_texts:
    polarity.append(TextBlob(x).sentiment.polarity)
polarity

screen_names = [status['user']['screen_name']
               for status in statuses]
screen_names    
     
df2 = pd.DataFrame({"Polarity" : polarity, "Screen Name" : screen_names, "Tweets" : status_texts})
df2

highest = df2.loc[df2["Polarity"].idxmax()]["Screen Name"]
highest
lowest = df2.loc[df2["Polarity"].idxmin()]["Screen Name"]
lowest

# Positive polarity
positive_user = twitter.statuses.user_timeline(screen_name = highest, count=100)
df_positive = json_normalize(positive_user)
user_positive = df_positive["text"]
words = [w
        for t in user_positive
            for w in t.split()]
df_words = pd.DataFrame(words)
df_words.columns = ["words"]
df_words
words_count_high = json_normalize(Counter(words))
words_count_high = words_count_high.transpose()
words_count_high.columns = ['Count']
words_count_high
words_count_high.loc['#YHOO']

# Negative Polarity
negative_user = twitter.statuses.user_timeline(screen_name = lowest, count=100)
df_negative = json_normalize(negative_user)
user_negative = df_negative["text"]
words = [w
        for t in user_negative
            for w in t.split()]
df_word = pd.DataFrame(words)
df_word.columns = ["words"]
df_word
words_count_low = json_normalize(Counter(words))
words_count_low = words_count_low.transpose()
words_count_low.columns = ['Count']
words_count_low
words_count_low.loc['#YHOO']
